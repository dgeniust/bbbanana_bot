from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import datetime
import schedule
import time
import threading

# L∆∞u danh s√°ch c√¥ng vi·ªác
tasks = []

# H√†m th√™m c√¥ng vi·ªác
async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 3:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: /add <ti√™u ƒë·ªÅ> <m√¥ t·∫£> <th·ªùi h·∫°n (YYYY-MM-DD HH:MM)>")
        return
    
    title = context.args[0]
    description = context.args[1]
    try:
        deadline = datetime.datetime.strptime(" ".join(context.args[2:]), '%Y-%m-%d %H:%M')
    except ValueError:
        await update.message.reply_text("Th·ªùi h·∫°n kh√¥ng h·ª£p l·ªá. ƒê·ªãnh d·∫°ng: YYYY-MM-DD HH:MM")
        return

    tasks.append({"title": title, "description": description, "deadline": deadline, "chat_id": update.effective_chat.id})
    await update.message.reply_text(f"ƒê√£ th√™m c√¥ng vi·ªác: {title}\nM√¥ t·∫£: {description}\nTh·ªùi h·∫°n: {deadline.strftime('%Y-%m-%d %H:%M')}")

# H√†m hi·ªÉn th·ªã danh s√°ch c√¥ng vi·ªác
async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not tasks:
        await update.message.reply_text("Danh s√°ch c√¥ng vi·ªác tr·ªëng!")
    else:
        message = "Danh s√°ch c√¥ng vi·ªác:\n"
        for i, task in enumerate(tasks, 1):
            message += f"{i}. {task['title']} - {task['description']} (H·∫°n: {task['deadline'].strftime('%Y-%m-%d %H:%M')})\n"
        await update.message.reply_text(message)

# H√†m x√≥a c√¥ng vi·ªác
async def delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("Vui l√≤ng nh·∫≠p s·ªë th·ª© t·ª± c√¥ng vi·ªác c·∫ßn x√≥a: /delete <s·ªë>")
        return

    try:
        index = int(context.args[0]) - 1
        removed_task = tasks.pop(index)
        await update.message.reply_text(f"ƒê√£ x√≥a c√¥ng vi·ªác: {removed_task['title']}")
    except (ValueError, IndexError):
        await update.message.reply_text("S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá.")

# H√†m nh·∫Øc nh·ªü
def send_reminders():
    now = datetime.datetime.now()
    for task in tasks:
        if task["deadline"] <= now:
            Application.current_app.bot.send_message(
                chat_id=task["chat_id"],
                text=f"üîî Nh·∫Øc nh·ªü: C√¥ng vi·ªác '{task['title']}' ƒë√£ ƒë·∫øn h·∫°n!\nM√¥ t·∫£: {task['description']}"
            )
            tasks.remove(task)

# L√™n l·ªãch nh·∫Øc nh·ªü
def schedule_reminders():
    schedule.every(1).minute.do(send_reminders)
    while True:
        schedule.run_pending()
        time.sleep(1)

# Kh·ªüi ch·∫°y bot
if __name__ == "__main__":
    TOKEN = "YOUR_BOT_TOKEN"
    app = Application.builder().token(TOKEN).build()

    # Th√™m l·ªánh
    app.add_handler(CommandHandler("add", add_task))
    app.add_handler(CommandHandler("list", list_tasks))
    app.add_handler(CommandHandler("delete", delete_task))

    # Ch·∫°y lu·ªìng nh·∫Øc nh·ªü
    reminder_thread = threading.Thread(target=schedule_reminders, daemon=True)
    reminder_thread.start()

    print("Bot ƒëang ch·∫°y...")
    app.run_polling()
