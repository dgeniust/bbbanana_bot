from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)
import subprocess
import datetime
import schedule
import time
import threading
import shlex
from sql_connection import connect_db

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try: 
        conn, cursor = connect_db()
        cursor.execute("SELECT * FROM tasks WHERE telegram_id_task =%s", (update.effective_chat.id,))
        tasks = cursor.fetchall()
        print("tasks type: " + str(type(tasks)))
        print("tasks: " + str(tasks))
        if not tasks:
            await update.message.reply_text("Danh s√°ch c√¥ng vi·ªác tr·ªëng!")
        else:
            message = f"Danh s√°ch c√¥ng vi·ªác c·ªßa ID {update.effective_chat.id}:\n" 
            for task in tasks:
                message += f"{task['stt']}. {task['header']} - {task['descriptions']} (Deadline: {task['deadline']})\n"
            await update.message.reply_text(message)
    except Exception as e:
        print(f"L·ªói: {str(e)}")
    
    
async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        conn, cursor = connect_db()
        # S·ª≠ d·ª•ng shlex ƒë·ªÉ ph√¢n t√≠ch c√∫ ph√°p ƒë√∫ng
        args = shlex.split(update.message.text)
        print(args)
        # X√°c minh c√∫ ph√°p
        if len(args) < 4:
            await update.message.reply_text(
                "Sai c√∫ ph√°p. Vui l√≤ng nh·∫≠p l·ªánh ƒë√∫ng ƒë·ªãnh d·∫°ng: /addtask <ti√™u ƒë·ªÅ> <m√¥ t·∫£> <th·ªùi h·∫°n (YYYY-MM-DD HH:MM)>"
            )
            return

        # L·∫•y ti√™u ƒë·ªÅ, m√¥ t·∫£ v√† th·ªùi h·∫°n
        title = args[1]  # Ti√™u ƒë·ªÅ
        description = args[2]  # M√¥ t·∫£
        deadline_input = " ".join(args[3:])  # Th·ªùi h·∫°n (ng√†y gi·ªù) #TYPE: <class 'str'>
        deadline = parse_deadline(deadline_input) #TYPE: <class 'datetime.datetime'>
        cursor.execute("SELECT * FROM tasks WHERE telegram_id_task= %s AND header = %s AND deadline =%s", (update.effective_chat.id, title, deadline_input))
        result = cursor.fetchone()
        print('result: ' + str(result))
        if result: 
            await update.message.reply_text(f'C√¥ng vi·ªác ƒë√£ t·ªìn t·∫°i')
            return
        else:
            cursor.execute("INSERT INTO tasks (telegram_id_task, header, descriptions, deadline) VALUES (%s, %s, %s, %s)", (update.effective_chat.id, title, description, deadline_input))
            conn.commit()
            await update.message.reply_text(
            f"‚úÖ ƒê√£ th√™m c√¥ng vi·ªác:\n"
            f"- Ti√™u ƒë·ªÅ: {title}\n"
            f"- M√¥ t·∫£: {description}\n"
            f"- Th·ªùi h·∫°n: {deadline.strftime('%Y-%m-%d %H:%M')}"
            )
        
        # Th√™m c√¥ng vi·ªác v√†o danh s√°ch
        # tasks.append({
        #     "title": title,
        #     "description": description,
        #     "deadline": deadline,
        #     "chat_id": update.effective_chat.id,
        # })
        # print('tasks: ' + str(tasks))
        
    except ValueError as ve:
        await update.message.reply_text(
            f"Th·ªùi h·∫°n kh√¥ng h·ª£p l·ªá: {deadline_input}\nH·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng:\n"
            f"- YYYY-MM-DD HH:MM\n- YYYY/MM/DD HH:MM\n- DD-MM-YYYY HH:MM\n- YYYY-MM-DD 12-hour (AM/PM)"
        )
    except Exception as e:
        print(f"L·ªói: {e}")
def parse_deadline(deadline_input):
    supported_formats = [
        '%Y-%m-%d %H:%M',  # YYYY-MM-DD HH:MM
        '%Y/%m/%d %H:%M',  # YYYY/MM/DD HH:MM
        '%d-%m-%Y %H:%M',  # DD-MM-YYYY HH:MM
        '%Y-%m-%d %I:%M %p',  # YYYY-MM-DD 12-hour (AM/PM)
    ]
    for fmt in supported_formats:
        try:
            return datetime.datetime.strptime(deadline_input, fmt)
        except ValueError:
            continue
    raise ValueError(f"Th·ªùi h·∫°n kh√¥ng h·ª£p l·ªá: {deadline_input}")

# H√†m x√≥a c√¥ng vi·ªác
# async def delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     if not context.args:
#         await update.message.reply_text("Vui l√≤ng nh·∫≠p s·ªë th·ª© t·ª± c√¥ng vi·ªác c·∫ßn x√≥a: /delete <s·ªë>")
#         return

#     try:
#         index = int(context.args[0]) - 1
#         removed_task = tasks.pop(index)
#         await update.message.reply_text(f"ƒê√£ x√≥a c√¥ng vi·ªác: {removed_task['title']}")
#     except (ValueError, IndexError):
#         await update.message.reply_text("S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá.")

# # H√†m nh·∫Øc nh·ªü
# def send_reminders():
#     now = datetime.datetime.now()
#     for task in tasks:
#         if task["deadline"] <= now:
#             Application.current_app.bot.send_message(
#                 chat_id=task["chat_id"],
#                 text=f"üîî Nh·∫Øc nh·ªü: C√¥ng vi·ªác '{task['title']}' ƒë√£ ƒë·∫øn h·∫°n!\nM√¥ t·∫£: {task['description']}"
#             )
#             tasks.remove(task)

# L√™n l·ªãch nh·∫Øc nh·ªü
# def schedule_reminders():
#     schedule.every(1).minute.do(send_reminders)
#     while True:
#         schedule.run_pending()
#         time.sleep(1)
